# 锚点
pr: &pr {type: select, proxies: [🚀 节点选择, 🍃 美国均衡,  ♻️ 亚太自动, ♻️ 美国自动, ♻️ 其他自动,♻️ 自动选择, 亚太节点, 🇺🇲 美国节点, 🌐 全部节点, ⭕ 自建节点,  🟢 直连]}
yt: &yt {type: select, proxies: [🍃 美国均衡, 🚀 节点选择,  ♻️ 亚太自动, ♻️ 美国自动, ♻️ 其他自动,♻️ 自动选择, 亚太节点, 🇺🇲 美国节点, 🌐 全部节点, ⭕ 自建节点, 🟢 直连]}

# 机场订阅，名称不能重复
proxy-providers:
  Airport_01:
    type: http
    interval: 28800 #8小时一次
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url:       
# 用于下载订阅时指定UA
global-ua:
    
# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
# interface-name: eth0  （路由器下根据情况指定出站接口）
authentication:
  - admin:admin
  
geodata-mode: false
# GEO 文件加载模式（standard：标准加载器/memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)）
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 48
geox-url:
  geosite: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://ghfast.top/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.metadb"
  geoip: "https://ghfast.top/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn: "https://ghfast.top/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"
  
# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: ui
external-ui-url: "https://ghfast.top/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"
# 下载面板地址可更换：https://mirror.ghproxy.com/https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true
hosts:
  cache.ott.ystenlive.itv.cmvideo.cn: feiyangdigital.tg.ystenlive.ottdns.com
  cache.ott.bestlive.itv.cmvideo.cn: feiyangdigital.tg.bestlive.ottdns.com
  cache.ott.wasulive.itv.cmvideo.cn: feiyangdigital.tg.wasulive.ottdns.com
  cache.ott.fifalive.itv.cmvideo.cn: feiyangdigital.tg.fifalive.ottdns.com
  cache.ott.hnbblive.itv.cmvideo.cn: feiyangdigital.tg.hnbblive.ottdns.com
  zqhswlive.itv.cmvideo.cn: feiyangdigital.tg.zqhswlive.ottdns.com  

# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com" 
    
# 代理模式
tun:
  enable: true
  stack: mixed
  mtu: 9000
  # dns劫持
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  # 自动设置全局路由，可以自动将全局流量路由进入 tun 网卡
  auto-route: true
  auto-redirect: true
  # 自动选择流量出口接口
  auto-detect-interface: true
  
# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  #遵循分流规则
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist 
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    #加*就表示所有都在黑名单，也就是变成redir-host
    #- "*"
    - "+.lan"
    - "+.local"
    - geosite:private
    - geosite:cn
    #DDNS
    - ipip.net
    - dyndns.com
    - oray.com
    - 3322.net
    - neu6.edu.cn
    - v6.ident.me
    - checkipv6.dyndns.com    
    - feiyangdigital.tg.ystenlive.ottdns.com
    - feiyangdigital.tg.bestlive.ottdns.com
    - feiyangdigital.tg.wasulive.ottdns.com
    - feiyangdigital.tg.fifalive.ottdns.com
    - feiyangdigital.tg.hnbblive.ottdns.com
    - feiyangdigital.tg.zqhswlive.ottdns.com    
    #GOOGLE TV 对时
    - aliyun.com

  default-nameserver:    
    - 223.5.5.5
  #开启遵循分流规则后，则必须加这一项
  proxy-server-nameserver:    
    - 223.5.5.5
  nameserver:
    - 223.5.5.5
  nameserver-policy:
    #防止被污染的域名
    "rule-set:proxylite":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"
    #direct0,    
    "rule-set:private_domain,direct1,cn_domain":
    - 223.5.5.5
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"
    
proxies:
- name: "🟢 直连"
  type: direct
  udp: true

  
# 策略组
proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [♻️ 美国自动, 🍃 美国均衡,  ♻️ 亚太自动, ♻️ 其他自动,♻️ 自动选择, 亚太节点, 🇺🇲 美国节点, 🌐 全部节点, ⭕ 自建节点, 🟢 直连]}
  - {name: 📹 YouTube, <<: *yt}
  - {name: 🍀 Google, type: select, proxies: [🚀 节点选择, ⭕ 自建节点]}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [🚀 节点选择, ⭕ 自建节点]}
  #- {name: 🐬 OneDrive, <<: *pr}
  #- {name: 🪟 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  #- {name: 🎥 NETFLIX, <<: *pr}  
  - {name: 💶 PayPal, type: select, proxies: [⭕ 自建节点]}  
  #- {name: 🔗 链式代理, type: relay, proxies: [🇺🇲 美国节点, ⭕ 自建链式]}
  - {name: 🎯 全球直连, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🚀 节点选择,⭕ 自建节点, ♻️ 美国自动, ♻️ 亚太自动, ♻️ 其他自动, 亚太节点]}
  #- {name: ⭕ 自建链式, type: select, include-all: true, filter: "^(ZJ)"}
  - {name: ⭕ 自建节点, type: select, include-all: true, filter: "^(ZJ)"}  
  - {name: 亚太节点, type: select, include-all: true, filter: "(?i)(HK|SG|JP|KR|TW|ZJ2)"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)(US|ZJ1)"}
  #- {name: 🔯 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}  
  - {name: ♻️ 亚太自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)(HK|SG|JP|KR|TW|ZJ2)"}
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)(US|ZJ1)"}
  - {name: ♻️ 其他自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(HK|US|JP|KR|ZJ|SG|TW|直连)).)*$"}     
  - {name: 🍃 美国均衡, type: load-balance, include-all: true, interval: 300, strategy: round-robin, filter: "(?i)(US|ZJ1)"}  
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}
rules:
  #- DOMAIN-SUFFIX,stream-link.org,⭕ 自建节点
  #- DOMAIN-SUFFIX,stream-link.online,⭕ 自建节点
  - RULE-SET,private_domain,🟢 直连
  #- RULE-SET,direct0,🟢 直连 
  - RULE-SET,direct1,🟢 直连
  #- RULE-SET,apple_domain,🍎 Apple
  #- RULE-SET,free,🔗 链式代理
  - RULE-SET,proxylite,🚀 节点选择   
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  #- RULE-SET,onedrive_domain,🐬 OneDrive
  #- RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  #- RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  #- RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  #- RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连
  - MATCH,🐟 漏网之鱼
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  zdy: &zdy {type: http, interval: 86400, behavior: domain, format: text}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  #direct0: { <<: *zdy, url: "https://ghfast.top/https://raw.githubusercontent.com/sztuxp/rules/master/Direct0.list" }
  direct1: { <<:  *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/sztuxp/rules/main/config/Clash/Direct1.mrs" }
  proxylite: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/sztuxp/rules/main/config/Clash/ProxyLite.mrs" }  
  #direct1: { <<: *class, url: "https://ghfast.top/https://raw.githubusercontent.com/sztuxp/rules/main/config/Clash/Direct1.mrs" }
  #proxylite: { <<: *zdy, url: "https://ghfast.top/https://raw.githubusercontent.com/sztuxp/rules/main/config/Clash/ProxyLite.mrs" }
  #direct1: { <<: *class, url: "https://ghfast.top/https://raw.githubusercontent.com/sztuxp/rules/master/Direct1.list" }
  #proxylite: { <<: *zdy, url: "https://ghfast.top/https://raw.githubusercontent.com/sztuxp/rules/master/ProxyLite.list" }
  #free: { <<: *zdy, url: "https://ghfast.top/https://raw.githubusercontent.com/sztuxp/rules/master/Free.list" }  
  ai: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-chat-!cn.mrs" }  
  youtube_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  telegram_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  #netflix_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  paypal_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs" }
  #onedrive_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }
  #microsoft_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  #apple_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  #speedtest_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  tiktok_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  #gfw_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  
  cn_ip: { <<: *ip, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://ghfast.top/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
